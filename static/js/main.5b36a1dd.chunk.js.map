{"version":3,"sources":["Header1.js","AddTask.js","TaskCount.js","TaskList.js","CompleteTask.js","SubHeader.js","App.js","serviceWorker.js","index.js"],"names":["Header","React","Component","AddTask","state","newItemText","dateSelected","moment","format","updateNewItemText","event","console","log","target","value","setState","handleClick","preventDefault","props","addNewTaskFunc","handleDateChange","e","className","type","id","placeholder","this","onChange","onClick","disabled","length","TaskCount","count","Item","handleDelete","deleteTaskFunc","handleComplete","completeTaskFunc","text","date","dueBy","completed","CompleteTask","complete","SubHeader","title","App","tasks","taskId","uuid","taskText","dateDue","dateCreated","addNewTask","dueByDate","tasksCopy","slice","newTask","axios","post","then","response","taskFromDB","data","push","catch","err","deleteTask","delete","filteredTasks","filter","task","fetchTasks","get","put","completedTasks","incompleteTasks","map","TaskList","key","completeTask","bind","dueDue","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.5b36a1dd.chunk.js","sourcesContent":["import React from \"react\"\n\nclass Header extends React.Component {\n    render() {\n        return (\n            <div>\n            <h1>To Do List</h1>\n            </div>\n        )\n    }\n}\n\nexport default Header;\n","import React from \"react\"\nimport moment from \"moment\"\n\nclass AddTask extends React.Component {\n    state = {\n        newItemText: \"\",\n        dateSelected: moment().format(\"YYYY-MM-DD\")\n    };\n\n    updateNewItemText = (event) => {\n        console.log(event.target.value)\n        this.setState({\n            newItemText: event.target.value\n        });\n    }\n\n    handleClick = (event) => {\n        event.preventDefault();\n        this.props.addNewTaskFunc(this.state.newItemText, this.state.dateSelected);\n        this.setState({\n            newItemText: \"\"\n        });\n    }\n\n    handleDateChange = e => {\n        console.log(e.target.value)\n        this.setState({\n            dateSelected: e.target.value\n        });\n    }\n    render() {\n        return (\n            <form className=\"form-inline\">\n                <div className=\"form-group mx-sm-3 mb-2\">\n                    <input\n                        type=\"text\"\n                        className=\"form-control task-input\"\n                        id=\"newItem\"\n                        placeholder=\"Add your task here\"\n                        value={this.state.newItemText}\n                        onChange={this.updateNewItemText}\n                    ></input>\n                </div>\n                <div className=\"form-group mx-sm-3 mb-2\">\n                    <input type='date'\n                        onChange={this.handleDateChange}\n                        value={this.state.dateSelected} /></div>\n                <button\n                    className=\"btn btn-primary mb-2\"\n                    onClick={this.handleClick}\n                    disabled={this.state.newItemText.length <= 0 || this.state.newItemText.length >= 20}>\n                    Add to list\n            </button>\n            </form>\n        )\n    }\n}\n\nexport default AddTask;","import React from \"react\"\n\nclass TaskCount extends React.Component {\n    render() {\n        return (\n            <h3>You have <strong>{this.props.count}</strong> tasks left to complete</h3>\n        )\n    }\n}\n\nexport default TaskCount;","import React from \"react\"\nimport moment from \"moment\"\nimport \"./App.css\"\nclass Item extends React.Component {\n  handleDelete = () => {\n    this.props.deleteTaskFunc(this.props.id);\n  }\n  handleComplete = () => {\n    this.props.completeTaskFunc(this.props.id);\n  }\n  render() {\n    return (\n      <tr>\n        <td>{this.props.text}</td>\n        <td>{moment(this.props.date, \"YYYY-MM-DD\").format(\"ddd Do MMM\")}</td>\n        <td>{moment(this.props.dueBy, \"YYYY-MM-DD\").format(\"ddd Do MMM\")}</td>\n        <td>{!this.props.completed && (\n          <button className=\"btn btn-info\"\n            onClick={this.handleComplete}>\n            Complete\n            </button>\n        )}</td>\n        <td><button className=\"btn btn-danger\"\n          onClick={this.handleDelete}>Delete</button></td>\n      </tr>\n    );\n  }\n}\n\nexport default Item;","import React from \"react\"\nimport \"./App.css\"\n\nclass CompleteTask extends React.Component {\n    render() {\n      return (\n        <div className=\"row\">\n          <div className=\"col-6 col-md-8\">\n            <p className={this.props.complete && \"complete\"}>{this.props.text}</p>\n          </div>\n        </div>\n      );\n    }\n  }\n\nexport default CompleteTask;","import React from \"react\"\n\nclass SubHeader extends React.Component {\n    render() {\n        return (\n            <div>\n                <h2>{this.props.title}</h2>\n            </div>\n        )\n    }\n}\n\nexport default SubHeader;\n","\nimport React, { Component } from \"react\";\nimport uuid from \"uuid/v4\";\nimport moment from \"moment\";\nimport axios from \"axios\";\nimport Header from \"./Header1\"\nimport AddTask from \"./AddTask\"\nimport TaskCount from \"./TaskCount\";\nimport TaskList from \"./TaskList\"\nimport CompleteTask from \"./CompleteTask\";\nimport SubHeader from \"./SubHeader\"\nimport \"./App.css\";\n\nclass App extends Component {\n  state = {\n    tasks: [\n      {\n        taskId: uuid(),\n        taskText: \"\",\n        completed: true,\n        dateDue: \"\",\n        id: uuid(),\n        dateCreated: moment().format(\"YYYY-MM-DD\")\n      },\n    ]\n  };\n\n  componentDidMount() {\n    this.fetchTasks();\n  }\n\n  fetchTasks() {\n    axios.get(\"https://y65zlhzmkj.execute-api.eu-west-1.amazonaws.com/dev/tasks\")\n      .then((response) => {\n        const tasks = response.data;\n        this.setState({\n          tasks: tasks\n        });\n      })\n      .catch((err) => {\n        console.log(\"Error getting task data\", err);\n      });\n  }\n\n  addNewTask = (taskText, dueByDate) => {\n    console.log(taskText, dueByDate, 'add task');\n    const tasksCopy = this.state.tasks.slice();\n    const newTask = {\n      taskText: taskText,\n      taskId: uuid(),\n      id: uuid(),\n      completed: false,\n      dateCreated: moment().format(\"YYYY-MM-DD\"),\n      dateDue: dueByDate\n    };\n\n    axios.post(\"https://y65zlhzmkj.execute-api.eu-west-1.amazonaws.com/dev/tasks\", newTask)\n      .then((response) => {\n        const taskFromDB = response.data;\n        tasksCopy.push(taskFromDB)\n        console.log(response)\n        this.setState({\n          tasks: tasksCopy\n        })\n      })\n      .catch((err) => {\n        console.log(\"Error creating task\", err);\n      })\n  };\n\n  completeTask(id) {\n    axios.put(\"https://y65zlhzmkj.execute-api.eu-west-1.amazonaws.com/dev/tasks/\" + id)\n      .then((response) => {\n        this.fetchTasks();\n      })\n      .catch((err) => {\n        console.log(\"Error completing task\", err);\n      })\n  };\n\n  deleteTask = id => {\n    axios.delete(\"https://y65zlhzmkj.execute-api.eu-west-1.amazonaws.com/dev/tasks/\" + id)\n      .then((response) => {\n        const filteredTasks = this.state.tasks.filter(task => {\n          return task.taskId !== id\n        });\n        this.setState({\n          tasks: filteredTasks\n        });\n      })\n      .catch((err) => {\n        console.log(\"Error deleting task\", err);\n      })\n  }\n\n  render() {\n    const completedTasks = this.state.tasks.filter(tasks => {\n      return tasks.completed;\n    });\n    const incompleteTasks = this.state.tasks.filter(tasks => {\n      return tasks.completed ? false : true;\n    });\n    return (\n      <div className=\"container\">\n        <Header />\n        <AddTask addNewTaskFunc={this.addNewTask} />\n        <TaskCount count={incompleteTasks.length} />\n        <table className=\"table\">\n          <tbody>\n            <tr>\n              <th>Task</th>\n              <th>Created</th>\n              <th>Due by</th>\n              <th></th>\n              <th></th>\n            </tr>\n            {incompleteTasks.map(task => {\n              return <TaskList\n                text={task.taskText}\n                completed={task.completed}\n                key={task.taskId}\n                deleteTaskFunc={this.deleteTask}\n                id={task.taskId}\n                completeTaskFunc={this.completeTask.bind(this)}\n                date={task.dateCreated}\n                dueBy={task.dateDue} />\n            })}\n          </tbody>\n        </table>\n        <SubHeader title=\"Completed Tasks\" />\n        {completedTasks.map(task => {\n          return <CompleteTask\n            text={task.taskText}\n            completed={task.completed}\n            key={task.taskId}\n            deleteTaskFunc={this.deleteTask}\n            id={task.taskId}\n            date={task.dateCreated}\n            dueDue={task.dateDue} />\n        })}\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import 'bootstrap/dist/css/bootstrap.css';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}